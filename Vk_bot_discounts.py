from vk_api import VkApi
from vk_api.utils import get_random_id
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import gspread
from datetime import datetime
import json

print('start')

GROUP_ID = '223656008'
GROUP_TOKEN = 'vk1.a.1Oko7BDg2QYMfsULXBIjYxjw_GomO5woi_VAmXt2bKp3-1h4pr2uvImK2UQVcUQltJYg0qMuq7h_7lHO-BBCZZJM28VepMHQGTa7jAg4IkWfJDWz7v-hlvw_qPlLUy5_Yrq5qg5F1GzQYmObAOi24JUbGLFkOWOiJ9y4qPHaXuwXxJlKTwz-iHnHSHyVeZDpzI1JY-6ziDfpjwk3R-b_Og'

API_VERSION = '5.120'

gc = gspread.service_account(filename="calm-vine-332204-924334d7332a.json")
sh_of_codes = gc.open_by_url('https://docs.google.com/spreadsheets/d/1nCGk8r3ILS7VbuArDtIgiMhDhgr1kk4UHlRVyjtt2EQ')
worksheet = sh_of_codes.sheet1
list_of_lists = worksheet.get_all_values()

HI = ["start", "–Ω–∞—á–∞—Ç—å", "–Ω–∞—á–∞–ª–æ", "–±–æ—Ç", "—Å—Ç–∞—Ä—Ç", "—Å–∫–∏–¥–∫–∏"]
text_inst = """
1. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ : "–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –í–∞–º  –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –Ω–∞–∂–º–∏—Ç–µ : "–≤–ø–µ—Ä–µ–¥"
–ó–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π —É—Å–ª—É–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç—É.
3. –¢–∞–∫–∂–µ –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å –≤—Å–µ—Ö –∞–∫—Ü–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É : "—Ç–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"
4. –ß—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤—è–∑–∏, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É : "–ú—ã –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ"
"""

start = 0
end = 5
categories = {}
companies_info = {}
users = []
bot_starts = {}
use_of_categories = {}

for elem in list_of_lists[1:]:
    # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏ –≥–¥–µ –∫–ª—é—á - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–Ω–∞—á–µ–Ω–∏–µ -—Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
    if elem[8] not in categories.keys():
        categories[elem[8]] = []
    if elem[0] not in categories[elem[8]]:
        categories[elem[8]].append(elem[0])
    # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ —Å–ª–æ–≤–∞—Ä—è–º–∏ –≥–¥–µ –∫–ª—é—á - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞–± –∑–Ω–∞—á–µ–Ω–∏–µ- –∏–Ω—Ñ–∞
    if elem[0] not in companies_info:
        companies_info[elem[0]] = []
    companies_info[elem[0]].append(elem[2:8])

vk_session = VkApi(token=GROUP_TOKEN, api_version=API_VERSION)
vk = vk_session.get_api()
longpoll = VkBotLongPoll(vk_session, group_id=GROUP_ID)

# –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ json —Ñ–∞–π–ª–∞—Ö(—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–æ–¥–Ω—è –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å) —É—Å–ª–æ–≤–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
def save_stats():
    with open('bot_starts.json', 'r+') as file:
        data = json.load(file)  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ(—Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ)
        data.update(bot_starts)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        file.seek(0)  # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ –Ω–∞—á–∞–ª—É —Ñ–∞–π–ª–∞
        json.dump(data, file)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    with open('use_of_categories.json', 'r+') as file2:
        data2 = json.load(file2)
        data2.update(use_of_categories)
        file2.seek(0)
        json.dump(data2, file2)

# –æ—Ç–∫—Ä—ã–≤–∞–µ–º json —Ñ–∞–π–ª(–Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ), –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
def show_stats(stat_name):
    if str(stat_name) == 'bot_starts':
        with open(f'{stat_name}.json', 'r') as file:
            stat_info = json.load(file)
        stat_info = {key: value for key, value in stat_info.items() if value}
        if len(stat_info) > 0:
            stat = [f"{key} - {value} —Ä–∞–∑(–∞)\n" for key, value in stat_info.items()]
    elif str(stat_name) == 'use_of_categories':
        with open(f'{stat_name}.json', 'r') as file:
            stat_info = json.load(file)
        if len(stat_info) > 0:
            stat = []
            for date, categories_info in stat_info.items():
                stat.append(f"{date}:")
                for category, count in categories_info.items():
                    stat.append(f"{category} - {count} —Ä–∞–∑(–∞) \n")
                stat.append("")
    else:
        stat = ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.']
    return f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{''.join(stat)}"

# —Å–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é, –ø—Ä–∏ –Ω–∞–∂—Ç–∏–∏ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞–º–µ–Ω—è–µ–º '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!' –Ω–∞ '–ú–µ–Ω—é!' (—É—Å–ª–æ–≤–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ)
def main_keyboard(menu='bot'):
    keyboard = VkKeyboard(inline=False)

    keyboard.add_callback_button(label='–¢–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏!', color=VkKeyboardColor.POSITIVE,
                                 payload={"type": "open_link", "link": "https://docs.google.com/spreadsheets/d/1FhYGE5IODqbtXSfQGBs0BGUaUJYAWBGAC2SRWqYzf6M"})
    keyboard.add_line()
    if menu == 'bot':
        keyboard.add_button(label='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!', color=VkKeyboardColor.NEGATIVE, payload={"type": "–º–µ–Ω—é"})
        keyboard.add_line()
    elif menu == 'menu':
        keyboard.add_button(label='–ú–µ–Ω—é!', color=VkKeyboardColor.NEGATIVE, payload={"type": "–º–µ–Ω—é"})
        keyboard.add_line()
    keyboard.add_callback_button(label='–ú—ã –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ!', color=VkKeyboardColor.PRIMARY,
                                 payload={"type": "open_link", "link": "https://t.me/skidkinezagorami"})
    return keyboard.get_keyboard()

# —Å–æ–∑–¥–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤. (–∫–Ω–æ–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö), –¥–ª—è "–≤–ø–µ—Ä–µ–¥", "–Ω–∞–∑–∞–¥" —É—Å–ª–æ–≤–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
def slider_keyboard(category_name=None, start=0, end=5):
    keyboard = VkKeyboard(inline=True)
    if category_name is None:
        category_names = list(categories.keys())
        for category_name in category_names[start:end]:
            keyboard.add_callback_button(label=category_name, color=VkKeyboardColor.SECONDARY,
                                         payload={"type": "text", "category": category_name})
            keyboard.add_line()
        if start != 0:
            keyboard.add_callback_button(label='–Ω–∞–∑–∞–¥', color=VkKeyboardColor.PRIMARY, payload={"type": "back"})
        if end <= len(category_names):
            keyboard.add_callback_button(label='–≤–ø–µ—Ä–µ–¥', color=VkKeyboardColor.PRIMARY, payload={"type": "forward"})
    else:
        shops = categories.get(category_name, [])
        if end > len(shops):
            end = len(shops)
        for shop in shops[start:end]:
            keyboard.add_button(label=shop, color=VkKeyboardColor.SECONDARY, payload={"type": "text", "name": shop})
            keyboard.add_line()
        if start != 0:
            keyboard.add_callback_button(label='–Ω–∞–∑–∞–¥', color=VkKeyboardColor.PRIMARY, payload={"type": "back2",
                                                                                            'category': category_name})
        if end + 1 <= len(shops):
            keyboard.add_callback_button(label='–≤–ø–µ—Ä–µ–¥', color=VkKeyboardColor.PRIMARY, payload={"type": "forward2",
                                                                                                 'category': category_name})
        else:
            keyboard.add_callback_button(label='–º–µ–Ω—é', color=VkKeyboardColor.PRIMARY, payload={"type": "–º–µ–Ω—é",
                                                                                                 'category': category_name})
    return keyboard.get_keyboard()

# –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É
def get_info(name):
    info = []
    for i in companies_info[name]:
        text = ""
        if i != None:
            text = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}"
        if i[1] != None:
            text += f"\n–°–∫–∏–¥–∫–∞: {i[1]}"
        if i[5] != None:
            text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {i[5]}"
        if i[3] != None:
            text += f"\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {i[3]}"
        if i[4] != None:
            text += f"\n–†–µ–≥–∏–æ–Ω: {i[4]}"
        if i[2] != None:
            text += f"\n–°—Å—ã–ª–∫–∞: \n{i[2]}"
        if i[0] != None and i[0] != "":
            text += "\n–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∏–∂–µüëá" + f'\n {i[0]}'
        else:
            text += "\n–î–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Å—Å—ã–ª–∫–µ"
        info.append(text)
    return '\n\n'.join(info) + '\n\n–ù–∞–∂–º–∏—Ç–µ –ú–µ–Ω—é, –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.'

print("Ready")

for event in longpoll.listen():

    if event.type == VkBotEventType.MESSAGE_NEW:

        if event.obj.message['text'] != '':

            if event.from_user:

                if event.obj.message['text'] == '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!' or event.obj.message['text'] == "–ú–µ–Ω—é!":
                    start = 0
                    end = 5
                    if event.obj.message['text'] == '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞!':
                        current_date = datetime.now().date()
                        formatted_date = current_date.strftime("%d.%m.%Y")
                        if formatted_date not in bot_starts.keys():
                            if formatted_date not in use_of_categories:
                                use_of_categories[formatted_date] = {}
                                save_stats()
                                bot_starts = {}
                                use_of_categories = {}
                                bot_starts[formatted_date] = 1
                        else:
                            bot_starts[formatted_date] += 1
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        keyboard=slider_keyboard(start=start, end=end),
                        message='–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')

                elif event.obj.message['text'].lower() == '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è':
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        keyboard=main_keyboard(),
                        message=text_inst)

                elif event.obj.message['text'].lower() == '–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞':
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        keyboard=main_keyboard(),
                        message=show_stats('bot_starts'))

                elif event.obj.message['text'].lower() == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π':
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        keyboard=main_keyboard(),
                        message=show_stats('use_of_categories'))

                elif event.obj.message['text'].lower() in HI:
                    if event.obj.message['from_id'] not in users:
                        users.append(event.obj.message['from_id'])
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        keyboard=main_keyboard(),
                        message=text_inst)

                elif event.obj.message['text'] in companies_info.keys():
                    shop_name = event.obj.message['text']
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        keyboard=main_keyboard(menu='menu'),
                        message=get_info(shop_name))


    elif event.type == VkBotEventType.MESSAGE_EVENT:
        payload_type = event.object.payload.get('type')
        if payload_type == 'text' and event.object.payload.get('category'):
            category_name = event.object.payload.get('category')
            if formatted_date not in use_of_categories:
                use_of_categories[formatted_date] = {}
            if category_name not in use_of_categories[formatted_date]:
                use_of_categories[formatted_date][category_name] = 1
            else:
                use_of_categories[formatted_date][category_name] += 1
            vk.messages.send(
                user_id=event.object['user_id'],
                random_id=get_random_id(),
                peer_id=event.object['peer_id'],
                keyboard=slider_keyboard(category_name, start=0, end=5),
                message='–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω')

        elif payload_type == 'shops':
            shop = event.object.payload.get('name')
            vk.messages.send(
                user_id=event.object['user_id'],
                random_id=get_random_id(),
                peer_id=event.object['peer_id'],
                keyboard=slider_keyboard(shop, start=0, end=5),
                message='–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω')

        if payload_type == 'back' or payload_type == 'forward':
            category_name = None
            if payload_type == 'back':
                start -= 5
                if start < 0:
                    start = 0
            elif payload_type == 'forward':
                start += 5
            vk.messages.edit(
                peer_id=event.object['peer_id'],
                message="–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                conversation_message_id=event.obj.conversation_message_id,
                keyboard=slider_keyboard(category_name, start=start, end=start + 5))

        elif payload_type == 'back2' or payload_type == 'forward2':
            category_name = event.object.payload.get('category')
            if payload_type == 'back2':
                start -= 5
                if start < 0:
                    start = 0
            elif payload_type == 'forward2':
                start += 5
            vk.messages.edit(
                peer_id=event.object['peer_id'],
                message="–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                conversation_message_id=event.obj.conversation_message_id,
                keyboard=slider_keyboard(category_name, start=start, end=start + 5))

        elif payload_type == '–º–µ–Ω—é':
            start = 0
            end = 5
            vk.messages.send(
                user_id=event.object['user_id'],
                random_id=get_random_id(),
                peer_id=event.object['peer_id'],
                message="–í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                keyboard=slider_keyboard(start=start, end=end))
